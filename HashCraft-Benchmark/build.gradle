buildscript {
    repositories {
        mavenCentral()
        maven { url = "https://maven.minecraftforge.net/" }
        maven {
            name = "gradle"
            url = "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
        classpath "com.github.jengelman.gradle.plugins:shadow:6.1.0"
    }
}

apply plugin: "net.minecraftforge.gradle"
apply plugin: "com.github.johnrengelman.shadow"

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

version = minecraft_version + "-" + mod_version
group= mod_group // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = mod_id

repositories {
    mavenCentral()
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven"
    }
}

minecraft {
    mappings channel: 'stable', version: '39-1.12'

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2859'

    implementation rootProject

    compileOnly 'org.openjdk.jmh:jmh-core:1.35'
    implementation fg.deobf("mezz.jei:jei_1.12.2:4.16.1.302")
    //compileOnly "mezz.jei:jei_1.12.2:4.16.1.302:api"

    annotationProcessor 'com.github.bsideup.jabel:jabel-javac-plugin:0.4.1'
    annotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.35'

    shadow 'org.openjdk.jmh:jmh-core:1.35'

}

configure([tasks.compileJava]) {
    sourceCompatibility = 11 // for the IDE support

    options.compilerArgs = [
        "--release", "8",
        '--enable-preview',
    ]

    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(11)
    }

    doFirst {
        // Can be omitted on Java 14 and higher
        options.compilerArgs << '-Xplugin:jabel'

        options.compilerArgs = options.compilerArgs.findAll {
            it != '--enable-preview'
        }
    }
}

jar.finalizedBy('reobfJar')

reobf {
    shadowJar {
        dependsOn tasks.createMcpToSrg
        mappings = tasks.createMcpToSrg.outputs.files.singleFile
    }
}

artifacts {
    archives tasks.shadowJar
}

shadowJar {
    configurations = [project.configurations.shadow]
    relocate 'org.apache.commons.math3', 'caonima.shabilaunchwrapper'
    mergeServiceFiles()
}

processResources
{
    duplicatesStrategy = DuplicatesStrategy.WARN

    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':"1.12.2"
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

// workaround for userdev bug
tasks.create("copyResourceToClasses", Copy.class) {
    tasks.classes.dependsOn(it)
    dependsOn(tasks.processResources)
    onlyIf { gradle.taskGraph.hasTask(tasks.prepareRuns) }

    into("$buildDir/classes/java/main")
    // if you write @Mod class in kotlin, please use code below
    // into("$buildDir/classes/kotlin/main")
    from(tasks.processResources.destinationDir)
}
